class Deq:

    MAX_SIZE = 20
    s = []
    
    ## @bried A constructor for the Deq object.
    #  @details It initializes the sequence used in the object.
    
    @staticmethod
    def init():
        Deq.s = []
        
    ## @brief A method to insert an element at the back of the sequence
    #  @details An exception is added in case the user tries to push an object into the sequence when the sequence is already full.
    #  The insert() function is used to insert an item at the left end of the sequence,, since that is considered as the back. 
    #  @param c A CircleT object to insert.
    
    @staticmethod
    def pushBack(c):
        s = Deq.s
        size = len(s)
        if size == Deq.MAX_SIZE:
            raise Full("Maximum size exceeded")
        s.append(c)
        Deq.s = s
        
    ## @brief A method to insert an element at the front of the sequence
    #  @details An exception is added in case the user tries to push an object into the sequence when the sequence is already full.
    #  The append() function is used to insert an item at the front since the right end of the sequence is considered to be the front.
    #  @param c A CircleT object to append.
    
    @staticmethod
    def pushFront(c):
        s = Deq.s
        size = len(s)
        if size == Deq.MAX_SIZE:
            raise Full("Maximum size exceeded")
        s.insert(0, c)
        Deq.s = s
        
    ## @brief A method that removes an element from the back of the sequence.
    #  @details An exception is added in case the user tries to use this method when the sequence is empty.
    #  The line "s = s[0:size-1]" creates a new sequence where the rightmost element is not included and then this new sequence is
    #  stored back into Deq.s.
    
    @staticmethod
    def popBack():
        s = Deq.s
        size = len(s)
        if size == 0:
            raise Empty("Sequence is empty")
        s = s[0:size-1]
        Deq.s = s
        
    ## @brief A method that removes an element from the front of the sequence.
    #  @details An exception is added in case the user tries to use this method when the sequence is empty.
    #  The line "s = s[1:size] is used to create a new sequence where the leftmost element is not included and then this new sequence is
    #  stored back into Deq.s.
    
    @staticmethod
    def popFront():
        s = Deq.s
        size = len(s)
        if size == 0:
            raise Empty("Sequence is empty")
        s = s[1:size]
        Deq.s = s
        
    ## @brief A getter for the item at the back of the sequence (rightmost item).
    #  @details An exception is raised if the user tries to call this method on an empty Deq.
    #  @return The last element in the sequence.   
    
    @staticmethod
    def back():
        s = Deq.s
        size = len(s)
        if size == 0:
            raise Empty("Sequence is empty")
        return Deq.s[size-1]
        
    ## @brief A getter for the item at the front of the sequence (leftmost item).
    #  @details An exception is raised if the user tries to call this method on an empty Deq.
    #  @return The first element in the sequence.
    
    @staticmethod
    def front():
        s = Deq.s
        size = len(s)
        if size == 0:
            raise Empty("Sequence is empty")
        return Deq.s[0]
        
    ## @brief A getter for the size of the sequence.
    #  @details The number of items in the sequence.
    
    @staticmethod
    def size():
        return len(Deq.s)
            
        
## @brief This class constitutes an exception for cases where the sequence is full.
class Full(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)
        
## @brief This class constitutes an exception for cases where the sequence is empty.
class Empty(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)
